import ast
import inspect
from textwrap import dedent

from zproc.process.api import ProcessAPI
from zproc.state.api import StateAPI

STATE_METHODS = (
    "ping",
    "time",
    "when",
    "when_available",
    "when_change",
    "when_change_raw",
    "when_equal",
    "when_not_equal",
    "when_falsy",
    "when_truthy",
    "when_none",
    "when_not_none",
)

PROCESS_METHODS = ("spawn", "spawn_map", "wait", "start_all", "stop_all")


def get_function_header(src: str) -> str:
    body: ast.FunctionDef = ast.parse(src).body[0].body[0]
    lines = src.splitlines()[: body.lineno]
    if body.col_offset != -1:
        lines[-1] = lines[-1][: body.col_offset]
    return "\n".join(lines)


def get_function_invocation(src: str) -> str:
    parts = []
    fn: ast.arguments = ast.parse(src).body[0].args
    if fn.args is not None:
        for arg in fn.args:
            parts.append(arg.arg)
    if fn.kwonlyargs is not None:
        for arg in fn.kwonlyargs:
            parts.append(arg.arg + "=" + arg.arg)
    if fn.vararg is not None:
        parts.append("*" + fn.vararg.arg)
    if fn.kwarg is not None:
        parts.append("**" + fn.kwarg.arg)
    return ", ".join(parts[1:])


print(
    dedent(
        """
        #
        # Generated by codegen.py
        #
        """
    )
)
for instance, cls, methods in (
    ("_state", StateAPI, STATE_METHODS),
    ("_process", ProcessAPI, PROCESS_METHODS),
):
    for name in methods:
        method = getattr(cls, name)
        src = dedent(inspect.getsource(method))
        header = get_function_header(src)
        invocation = get_function_invocation(src)
        body = f"return self.{instance}.{name}({invocation})"
        print(header + "\n" + " " * 4 + body + "\n\n")
print(
    dedent(
        """
        #
        # End of generated code
        #
        """
    )
)
